name: CI

on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      build_type:
        default: 'Release'
        required: true
        type: string
      cpp_compiler:
        required: true
        type: string

env: 
  VCPKG_ROOT: "./vcpkg"
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
  VERSION_FILE: cmake/modcam_version.cmake
  MAJOR_VERSION:
  MINOR_VERSION:

jobs:
  build:
    name: Build ${{ inputs.os }} + ${{ inputs.cpp_compiler }} + ${{ inputs.build_type }}
    runs-on: ${{ inputs.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up cache
      uses: actions/github-script@v7
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

    - name: Install vcpkg
      shell: bash
      run: |
        git clone http://github.com/Microsoft/vcpkg
        ./vcpkg/bootstrap-vcpkg.sh -disableMetrics

    - name: Configure
      run: >
        cmake -S .
        -DCMAKE_CXX_COMPILER=${{ inputs.cpp_compiler }}
        -DCMAKE_BUILD_TYPE=${{ inputs.build_type }}
        --preset "build-tests"

    - name: Build
      run: cmake --build build --config ${{ inputs.build_type }}
    
    - name: Upload build artifacts
      id: build-artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ inputs.os }}-${{ inputs.cpp_compiler }}-${{ inputs.build_type }}
        path: build/
        retention-days: 30

  test:
    name: Test ${{ inputs.os }} + ${{ inputs.cpp_compiler }} + ${{ inputs.build_type }}
    runs-on: ${{ inputs.os }}
    needs: build
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-${{ inputs.os }}-${{ inputs.cpp_compiler }}-${{ inputs.build_type }}
        path: build/
    - name: Test
      run: |
        ls build/
        ctest --test-dir build --build-config ${{ inputs.build_type }}

  # Make sure the documentation is not broken.
  # build-docs:
  #   name: Build docs
  #   runs-on: ubuntu-latest

  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v4

  #   - name: Install Doxygen
  #     run: sudo apt-get install -y doxygen
    
  #   - name: Build docs
  #     run: cmake -S . --preset "build-docs-only"
  
  # update-version:
  #   name: Update version
  #   runs-on: ubuntu-latest
  #   needs: [ test, build-docs ]
  #   if: github.ref_name == $default-branch
  #   permissions: 
  #     contents: write

  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v4

  #   - name: Get current version
  #     run: |
  #       version="$(< $VERSION_FILE)"
  #       IFS='.' read -ra version <<< "$version"
  #       MAJOR_VERSION=${version[0]}
  #       MINOR_VERSION=${version[1]}
    
  #   - name: Update version
  #     run: |
  #       utc_date=$(date --utc +"%Y%m%d")
  #       if [ "$utc_date" -eq "$MAJOR_VERSION" ]; then
  #         if [[ -z "$MINOR_VERSION" ]]; then
  #           MINOR_VERSION=0
  #         fi
  #         (( ++MINOR_VERSION ))
  #         echo $utc_date.$MINOR_VERSION > $VERSION_FILE
  #       else
  #         echo $utc_date > $VERSION_FILE
  #       fi

  #   - name: Push updated version file
  #     run: |
  #       git add $VERSION_FILE
  #       git -c user.name='CI workflow' -c user.email='<>' commit -m 'Update version'
  #       version="$(< $VERSION_FILE)"
  #       git tag $version
  #       git fetch
  #       git push
  #       git push origin $version
