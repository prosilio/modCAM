name: CI

on:
  push:
    branches: [ $default-branch ]
    paths-ignore: [ cmake/modcam_version.cmake ]
  pull_request:
    paths-ignore: [ cmake/modcam_version.cmake ]

env: 
  VCPKG_ROOT: "./vcpkg"
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
  VERSION_FILE: cmake/modcam_version.cmake
  VERSION: 

jobs:
  update-version:
    name: Update version
    runs-on: ubuntu-latest
    permissions: 
      contents: write
    env:
      MAJOR_VERSION:
      MINOR_VERSION:

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Get current version
      run: |
        VERSION="$(< $VERSION_FILE)"
        IFS='.' read -ra VERSION <<< "$VERSION"
        MAJOR_VERSION=${VERSION[0]}
        MINOR_VERSION=${VERSION[1]}

    - name: Update version
      run: |
        utc_date=$(date --utc +"%Y%m%d")
        if [ "$utc_date" -eq "$MAJOR_VERSION" ]; then
          if [[ -z "$MINOR_VERSION" ]]; then
            MINOR_VERSION=0
          fi
          (( ++MINOR_VERSION ))
          VERSION=$utc_date.$MINOR_VERSION
        else
          VERSION=$utc_date
        fi

  build-and-test:
    name: Build and test on ${{ matrix.os }} + ${{ matrix.cpp_compiler }} + ${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}
    needs: update-version

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        cpp_compiler: [g++, clang++, cl]
        exclude:
          - os: windows-latest
            cpp_compiler: g++
          - os: windows-latest
            cpp_compiler: clang++
          - os: ubuntu-latest
            cpp_compiler: cl

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Update version
      shell: bash
      run: echo $VERSION > $VERSION_FILE

    - name: Set up cache
      uses: actions/github-script@v7
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

    - name: Install vcpkg
      shell: bash
      run: |
        git clone http://github.com/Microsoft/vcpkg
        ./vcpkg/bootstrap-vcpkg.sh -disableMetrics

    - name: Configure
      run: >
        cmake -S .
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        --preset "build-tests"

    - name: Build
      run: cmake --build build --config ${{ matrix.build_type }}

    - name: Test
      run: ctest --test-dir build --build-config ${{ matrix.build_type }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.os }}-${{ matrix.cpp_compiler }}-${{ matrix.build_type }}
        path: build/
        retention-days: 5

  # Make sure the documentation is not broken.
  build-docs:
    name: Build docs
    runs-on: ubuntu-latest
    needs: update-version

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Update version
      run: echo $VERSION > $VERSION_FILE

    - name: Install Doxygen
      run: sudo apt-get install -y doxygen
    
    - name: Build docs
      run: |
        cmake -S . --preset "build-docs-only"
        cmake --build build --config Release

  push-version:
    name: Push new version
    runs-on: ubuntu-latest
    needs: [ update-version, build-and-test, build-docs ]
    if: github.ref_name == 'main'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Update version
      run: echo $VERSION > $VERSION_FILE

    - name: Push updated version file
      id: version-tag
      run: |
        git add $VERSION_FILE
        git -c user.name='CI workflow' -c user.email='<>' commit -m 'Update version'
        git tag $VERSION
        git fetch
        git push
        git push origin $VERSION
